# Default values for k8s-observability-stack

global:
  environment: production
  domain: monitoring.example.com

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      retention: 30d
      scrapeInterval: 15s
      evaluationInterval: 15s
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi
      resources:
        requests:
          memory: 2Gi
          cpu: 1000m
        limits:
          memory: 4Gi
          cpu: 2000m
      additionalScrapeConfigs:
        - job_name: 'kubernetes-pods'
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true

  grafana:
    enabled: true
    adminPassword: "ChangeMe123!"
    persistence:
      enabled: true
      size: 10Gi
    ingress:
      enabled: true
      hosts:
        - grafana.example.com
      tls:
        - secretName: grafana-tls
          hosts:
            - grafana.example.com
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: 'Custom'
            type: file
            disableDeletion: false
            updateIntervalSeconds: 10
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/default
    dashboards:
      default:
        cluster-overview:
          url: https://grafana.com/api/dashboards/7249/revisions/1/download
        node-exporter:
          url: https://grafana.com/api/dashboards/1860/revisions/1/download

  alertmanager:
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
      resources:
        requests:
          memory: 100Mi
          cpu: 100m
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: ['alertname', 'cluster', 'service']
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 12h
        receiver: 'null'
        routes:
          - match:
              severity: critical
            receiver: pagerduty
          - match:
              severity: warning
            receiver: slack
      receivers:
        - name: 'null'
        - name: 'slack'
          slack_configs:
            - api_url: 'YOUR_SLACK_WEBHOOK_URL'
              channel: '#alerts'
              title: 'Alert: {{ .GroupLabels.alertname }}'
        - name: 'pagerduty'
          pagerduty_configs:
            - service_key: 'YOUR_PAGERDUTY_KEY'

loki-stack:
  loki:
    enabled: true
    persistence:
      enabled: true
      size: 50Gi
    config:
      auth_enabled: false
      ingester:
        chunk_idle_period: 3m
        chunk_retain_period: 1m
        max_transfer_retries: 0
      limits_config:
        enforce_metric_name: false
        reject_old_samples: true
        reject_old_samples_max_age: 168h
      schema_config:
        configs:
          - from: 2023-01-01
            store: boltdb-shipper
            object_store: filesystem
            schema: v11
            index:
              prefix: index_
              period: 24h
      server:
        http_listen_port: 3100
      storage_config:
        boltdb_shipper:
          active_index_directory: /loki/boltdb-shipper-active
          cache_location: /loki/boltdb-shipper-cache
          cache_ttl: 24h
        filesystem:
          directory: /loki/chunks
      chunk_store_config:
        max_look_back_period: 0s
      table_manager:
        retention_deletes_enabled: true
        retention_period: 168h

  promtail:
    enabled: true
    config:
      clients:
        - url: http://loki:3100/loki/api/v1/push
      snippets:
        pipelineStages:
          - docker: {}
          - drop:
              source: namespace
              value: kube-system

jaeger:
  provisionDataStore:
    cassandra: false
  allInOne:
    enabled: true
  storage:
    type: memory
  agent:
    enabled: false
  collector:
    enabled: false
  query:
    enabled: false