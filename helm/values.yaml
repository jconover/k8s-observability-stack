# K8s Observability Stack Configuration

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      retention: 30d
      scrapeInterval: 15s
      evaluationInterval: 15s
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi
      resources:
        requests:
          memory: 2Gi
          cpu: 1000m
        limits:
          memory: 4Gi
          cpu: 2000m
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false

  grafana:
    enabled: true
    adminPassword: "ChangeMe123!"
    persistence:
      enabled: true
      size: 10Gi
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: 'Custom'
            type: file
            disableDeletion: false
            updateIntervalSeconds: 10
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/default
    dashboards:
      default:
        cluster-overview:
          gnetId: 7249
          revision: 1
          datasource: Prometheus
        node-exporter:
          gnetId: 1860
          revision: 27
          datasource: Prometheus

  alertmanager:
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: ['alertname', 'cluster', 'service']
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 12h
        receiver: 'null'
      receivers:
        - name: 'null'
        - name: 'slack'
          slack_configs:
            - api_url: 'YOUR_SLACK_WEBHOOK_URL'
              channel: '#alerts'
              title: 'Alert: {{ .GroupLabels.alertname }}'
              text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'

  prometheusOperator:
    admissionWebhooks:
      enabled: false

  kubeStateMetrics:
    enabled: true

  nodeExporter:
    enabled: true

  # Disable components we don't need
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeControllerManager:
    enabled: false

loki-stack:
  loki:
    enabled: true
    persistence:
      enabled: true
      size: 50Gi
    config:
      auth_enabled: false
      server:
        http_listen_port: 3100
        grpc_listen_port: 9096
      ingester:
        chunk_idle_period: 30m
        chunk_retain_period: 1m
        lifecycler:
          address: 127.0.0.1
          ring:
            kvstore:
              store: inmemory
            replication_factor: 1
      limits_config:
        enforce_metric_name: false
        reject_old_samples: true
        reject_old_samples_max_age: 168h
      schema_config:
        configs:
          - from: 2023-05-01
            store: boltdb-shipper
            object_store: filesystem
            schema: v11
            index:
              prefix: index_
              period: 24h
      storage_config:
        boltdb_shipper:
          active_index_directory: /loki/boltdb-shipper-active
          cache_location: /loki/boltdb-shipper-cache
          cache_ttl: 24h
          shared_store: filesystem
        filesystem:
          directory: /loki/chunks
      table_manager:
        retention_deletes_enabled: true
        retention_period: 168h

  promtail:
    enabled: true
    config:
      serverPort: 3101
      clients:
        - url: http://loki:3100/loki/api/v1/push

  grafana:
    enabled: false  # We're using grafana from kube-prometheus-stack